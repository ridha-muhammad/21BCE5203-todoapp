{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ridha\\\\College\\\\Java Full Stack Course\\\\todoapp\\\\client\\\\src\\\\Views\\\\TODO\\\\TODO.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react'\n// import Styles from './TODO.module.css'\n// import { dummy } from './dummy'\n// import axios from 'axios';\n\n// export function TODO(props) {\n\n//     const [newTodo, setNewTodo] = useState('')\n//     const [todoData, setTodoData] = useState(dummy);\n//     const [loading, setLoading] = useState(true);\n//     const [editingTodo, setEditingTodo] = useState(null);\n//     const [editedTodo, setEditedTodo] = useState('');\n\n//     useEffect(() => {\n//         const fetchTodo = async () => {\n//             const apiData = await getTodo()\n//             setTodoData(apiData);\n//             setLoading(false)\n//         }\n//         fetchTodo();\n//     }, [])\n\n//     const getTodo = async () => {\n//         const options = {\n//             method: \"GET\",\n//             url: `http://localhost:8000/api/todo`,\n//             headers: {\n//                 accept: \"application/json\",\n//             }\n//         }\n//         try {\n//             const response = await axios.request(options)\n//             return response.data\n//         } catch (err) {\n//             console.log(err);\n//             return []; // return an empty array in case of error\n//         }\n//     }\n\n//     const addTodo = () => {\n//         const options = {\n//             method: \"POST\",\n//             url: `http://localhost:8000/api/todo`,\n//             headers: {\n//                 accept: \"application/json\",\n//             },\n//             data: {\n//                 title: newTodo\n//             }\n//         }\n//         axios\n//             .request(options)\n//             .then(function (response) {\n//                 console.log(response.data)\n//                 setTodoData(prevData => [...prevData, response.data.newTodo])\n//             })\n//             .catch((err) => {\n//                 console.log(err)\n//             })\n//     }\n\n//     const deleteTodo = (id) => {\n//         const options = {\n//             method: \"DELETE\",\n//             url: `http://localhost:8000/api/todo/${id}`,\n//             headers: {\n//                 accept: \"application/json\",\n//             }\n//         }\n//         axios\n//             .request(options)\n//             .then(function (response) {\n//                 console.log(response.data)\n//                 setTodoData(prevData => prevData.filter(todo => todo._id !== id))\n//             })\n//             .catch((err) => {\n//                 console.log(err)\n//             })\n//     };\n\n//     const updateTodo = (id) => {\n//         const todoToUpdate = todoData.find(todo => todo._id === id)\n//         const options = {\n//             method: \"PATCH\",\n//             url: `http://localhost:8000/api/todo/${id}`,\n//             headers: {\n//                 accept: \"application/json\",\n//             },\n//             data: {\n//                 ...todoToUpdate,\n//                 done: !todoToUpdate.done\n//             }\n//         }\n//         axios\n//             .request(options)\n//             .then(function (response) {\n//                 console.log(response.data)\n//                 setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\n//             })\n//             .catch((err) => {\n//                 console.log(err)\n//             })\n//     };\n\n//     const editTodo = (id) => {\n//         const options = {\n//             method: \"PATCH\",\n//             url: `http://localhost:8000/api/todo/${id}`,\n//             headers: {\n//                 accept: \"application/json\",\n//             },\n//             data: {\n//                 title: editedTodo\n//             }\n//         }\n//         axios\n//             .request(options)\n//             .then(function (response) {\n//                 console.log(response.data)\n//                 setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\n//                 setEditingTodo(null)\n//                 setEditedTodo('')\n//             })\n//             .catch((err) => {\n//                 console.log(err)\n//             })\n//     };\n\n//     return (\n//         <div className={Styles.ancestorContainer}>\n//             <div className={Styles.headerContainer}>\n//                 <h1>\n//                     Tasks\n//                 </h1>\n//                 <span>\n//                     <input\n//                         className={Styles.todoInput}\n//                         type='text'\n//                         name='New Todo'\n//                         value={newTodo}\n//                         onChange={(event) => {\n//                             setNewTodo(event.target.value)\n//                         }}\n//                     />\n//                     <button\n//                         id='addButton'\n//                         name='add'\n//                         className={Styles.addButton}\n//                         onClick={() => {\n//                             addTodo()\n//                             setNewTodo('')\n//                         }}\n//                     >\n//                         + New Todo\n//                     </button>\n//                 </span>\n//             </div>\n//             <div id='todoContainer' className={Styles.todoContainer}>\n//                 {loading ? (\n//                     <p style={{ color: 'white' }}>Loading...</p>\n//                 ) : (\n//                     todoData.length > 0 ? (\n//                         todoData.map((entry, index) => (\n//                             <div key={entry._id} className={Styles.todo}>\n//                                 {editingTodo === entry._id ? (\n//                                     <span className={Styles.infoContainer}>\n//                                         <input\n//                                             type='text'\n//                                             value={editedTodo}\n//                                             onChange={(event) => setEditedTodo(event.target.value)}\n//                                         />\n//                                         <button onClick={() => editTodo(entry._id)}>Save</button>\n//                                         <button onClick={() => setEditingTodo(null)}>Cancel</button>\n//                                     </span>\n//                                 ) : (\n//                                     <span className={Styles.infoContainer}>\n//                                         <input\n//                                             type='checkbox'\n//                                             checked={entry.done}\n//                                             onChange={() => {\n//                                                 updateTodo(entry._id);\n//                                             }}\n//                                         />\n//                                         {entry.title}\n//                                     </span>\n//                                 )}\n//                                 <span style={{ cursor: 'pointer' }} onClick={() => setEditingTodo(entry._id)}>\n//                                     Edit\n//                                 </span>\n//                                 <span\n//                                     style={{ cursor: 'pointer' }}\n//                                     onClick={() => {\n//                                         deleteTodo(entry._id);\n//                                     }}\n//                                 >\n//                                     Delete\n//                                 </span>\n//                             </div>\n//                         ))\n//                     ) : (\n//                         <p className={Styles.noTodoMessage}>No tasks available. Please add a new task.</p>\n//                     )\n//                 )}\n//             </div>\n//         </div>\n//     )\n// }\n\nimport { useEffect, useState } from 'react';\nimport Styles from './TODO.module.css';\nimport { dummy } from './dummy';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TODO(props) {\n  _s();\n  const [newTodo, setNewTodo] = useState('');\n  const [newDescription, setNewDescription] = useState('');\n  const [todoData, setTodoData] = useState(dummy);\n  const [loading, setLoading] = useState(true);\n  const [editingTodo, setEditingTodo] = useState(null);\n  const [editedTodo, setEditedTodo] = useState('');\n  const [editedDescription, setEditedDescription] = useState('');\n  useEffect(() => {\n    const fetchTodo = async () => {\n      const apiData = await getTodo();\n      setTodoData(apiData);\n      setLoading(false);\n    };\n    fetchTodo();\n  }, []);\n  const getTodo = async () => {\n    const options = {\n      method: \"GET\",\n      url: `http://localhost:8000/api/todo`,\n      headers: {\n        accept: \"application/json\"\n      }\n    };\n    try {\n      const response = await axios.request(options);\n      return response.data;\n    } catch (err) {\n      console.log(err);\n      return []; // return an empty array in case of error\n    }\n  };\n  const addTodo = () => {\n    const options = {\n      method: \"POST\",\n      url: `http://localhost:8000/api/todo`,\n      headers: {\n        accept: \"application/json\"\n      },\n      data: {\n        title: newTodo,\n        description: newDescription\n      }\n    };\n    axios.request(options).then(function (response) {\n      console.log(response.data);\n      setTodoData(prevData => [...prevData, response.data.newTodo]);\n      setNewTodo('');\n      setNewDescription('');\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  const deleteTodo = id => {\n    const options = {\n      method: \"DELETE\",\n      url: `http://localhost:8000/api/todo/${id}`,\n      headers: {\n        accept: \"application/json\"\n      }\n    };\n    axios.request(options).then(function (response) {\n      console.log(response.data);\n      setTodoData(prevData => prevData.filter(todo => todo._id !== id));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  const updateTodo = id => {\n    const todoToUpdate = todoData.find(todo => todo._id === id);\n    const options = {\n      method: \"PATCH\",\n      url: `http://localhost:8000/api/todo/${id}`,\n      headers: {\n        accept: \"application/json\"\n      },\n      data: {\n        ...todoToUpdate,\n        done: !todoToUpdate.done\n      }\n    };\n    axios.request(options).then(function (response) {\n      console.log(response.data);\n      setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  const editTodo = id => {\n    const options = {\n      method: \"PATCH\",\n      url: `http://localhost:8000/api/todo/${id}`,\n      headers: {\n        accept: \"application/json\"\n      },\n      data: {\n        title: editedTodo,\n        description: editedDescription\n      }\n    };\n    axios.request(options).then(function (response) {\n      console.log(response.data);\n      setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo));\n      setEditingTodo(null);\n      setEditedTodo('');\n      setEditedDescription('');\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: Styles.ancestorContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: Styles.headerContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: Styles.todoInput,\n          type: \"text\",\n          name: \"New Todo\",\n          value: newTodo,\n          onChange: event => {\n            setNewTodo(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: Styles.todoInput,\n          type: \"text\",\n          name: \"New Description\",\n          value: newDescription,\n          onChange: event => {\n            setNewDescription(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"addButton\",\n          name: \"add\",\n          className: Styles.addButton,\n          onClick: addTodo,\n          children: \"+ New Todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"todoContainer\",\n      className: Styles.todoContainer,\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'white'\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }, this) : todoData.length > 0 ? todoData.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Styles.todo,\n        children: [editingTodo === entry._id ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: Styles.infoContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedTodo,\n            onChange: event => setEditedTodo(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedDescription,\n            onChange: event => setEditedDescription(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editTodo(entry._id),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditingTodo(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: Styles.infoContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: entry.done,\n            onChange: () => {\n              updateTodo(entry._id);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: entry.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: entry.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            cursor: 'pointer'\n          },\n          onClick: () => {\n            setEditingTodo(entry._id);\n            setEditedTodo(entry.title);\n            setEditedDescription(entry.description);\n          },\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            cursor: 'pointer'\n          },\n          onClick: () => {\n            deleteTodo(entry._id);\n          },\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 33\n        }, this)]\n      }, entry._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 29\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: Styles.noTodoMessage,\n        children: \"No tasks available. Please add a new task.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 9\n  }, this);\n}\n_s(TODO, \"kZxB/G4PHIomWdwjUbp0+waYpf4=\");\n_c = TODO;\nvar _c;\n$RefreshReg$(_c, \"TODO\");","map":{"version":3,"names":["useEffect","useState","Styles","dummy","axios","jsxDEV","_jsxDEV","TODO","props","_s","newTodo","setNewTodo","newDescription","setNewDescription","todoData","setTodoData","loading","setLoading","editingTodo","setEditingTodo","editedTodo","setEditedTodo","editedDescription","setEditedDescription","fetchTodo","apiData","getTodo","options","method","url","headers","accept","response","request","data","err","console","log","addTodo","title","description","then","prevData","catch","deleteTodo","id","filter","todo","_id","updateTodo","todoToUpdate","find","done","map","editTodo","className","ancestorContainer","children","headerContainer","fileName","_jsxFileName","lineNumber","columnNumber","todoInput","type","name","value","onChange","event","target","addButton","onClick","todoContainer","style","color","length","entry","index","infoContainer","checked","cursor","noTodoMessage","_c","$RefreshReg$"],"sources":["C:/Users/ridha/College/Java Full Stack Course/todoapp/client/src/Views/TODO/TODO.js"],"sourcesContent":["// import { useEffect, useState } from 'react'\r\n// import Styles from './TODO.module.css'\r\n// import { dummy } from './dummy'\r\n// import axios from 'axios';\r\n\r\n// export function TODO(props) {\r\n\r\n//     const [newTodo, setNewTodo] = useState('')\r\n//     const [todoData, setTodoData] = useState(dummy);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [editingTodo, setEditingTodo] = useState(null);\r\n//     const [editedTodo, setEditedTodo] = useState('');\r\n\r\n//     useEffect(() => {\r\n//         const fetchTodo = async () => {\r\n//             const apiData = await getTodo()\r\n//             setTodoData(apiData);\r\n//             setLoading(false)\r\n//         }\r\n//         fetchTodo();\r\n//     }, [])\r\n\r\n//     const getTodo = async () => {\r\n//         const options = {\r\n//             method: \"GET\",\r\n//             url: `http://localhost:8000/api/todo`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             }\r\n//         }\r\n//         try {\r\n//             const response = await axios.request(options)\r\n//             return response.data\r\n//         } catch (err) {\r\n//             console.log(err);\r\n//             return []; // return an empty array in case of error\r\n//         }\r\n//     }\r\n\r\n//     const addTodo = () => {\r\n//         const options = {\r\n//             method: \"POST\",\r\n//             url: `http://localhost:8000/api/todo`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             },\r\n//             data: {\r\n//                 title: newTodo\r\n//             }\r\n//         }\r\n//         axios\r\n//             .request(options)\r\n//             .then(function (response) {\r\n//                 console.log(response.data)\r\n//                 setTodoData(prevData => [...prevData, response.data.newTodo])\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err)\r\n//             })\r\n//     }\r\n\r\n//     const deleteTodo = (id) => {\r\n//         const options = {\r\n//             method: \"DELETE\",\r\n//             url: `http://localhost:8000/api/todo/${id}`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             }\r\n//         }\r\n//         axios\r\n//             .request(options)\r\n//             .then(function (response) {\r\n//                 console.log(response.data)\r\n//                 setTodoData(prevData => prevData.filter(todo => todo._id !== id))\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err)\r\n//             })\r\n//     };\r\n\r\n//     const updateTodo = (id) => {\r\n//         const todoToUpdate = todoData.find(todo => todo._id === id)\r\n//         const options = {\r\n//             method: \"PATCH\",\r\n//             url: `http://localhost:8000/api/todo/${id}`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             },\r\n//             data: {\r\n//                 ...todoToUpdate,\r\n//                 done: !todoToUpdate.done\r\n//             }\r\n//         }\r\n//         axios\r\n//             .request(options)\r\n//             .then(function (response) {\r\n//                 console.log(response.data)\r\n//                 setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err)\r\n//             })\r\n//     };\r\n\r\n//     const editTodo = (id) => {\r\n//         const options = {\r\n//             method: \"PATCH\",\r\n//             url: `http://localhost:8000/api/todo/${id}`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             },\r\n//             data: {\r\n//                 title: editedTodo\r\n//             }\r\n//         }\r\n//         axios\r\n//             .request(options)\r\n//             .then(function (response) {\r\n//                 console.log(response.data)\r\n//                 setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\r\n//                 setEditingTodo(null)\r\n//                 setEditedTodo('')\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err)\r\n//             })\r\n//     };\r\n\r\n//     return (\r\n//         <div className={Styles.ancestorContainer}>\r\n//             <div className={Styles.headerContainer}>\r\n//                 <h1>\r\n//                     Tasks\r\n//                 </h1>\r\n//                 <span>\r\n//                     <input\r\n//                         className={Styles.todoInput}\r\n//                         type='text'\r\n//                         name='New Todo'\r\n//                         value={newTodo}\r\n//                         onChange={(event) => {\r\n//                             setNewTodo(event.target.value)\r\n//                         }}\r\n//                     />\r\n//                     <button\r\n//                         id='addButton'\r\n//                         name='add'\r\n//                         className={Styles.addButton}\r\n//                         onClick={() => {\r\n//                             addTodo()\r\n//                             setNewTodo('')\r\n//                         }}\r\n//                     >\r\n//                         + New Todo\r\n//                     </button>\r\n//                 </span>\r\n//             </div>\r\n//             <div id='todoContainer' className={Styles.todoContainer}>\r\n//                 {loading ? (\r\n//                     <p style={{ color: 'white' }}>Loading...</p>\r\n//                 ) : (\r\n//                     todoData.length > 0 ? (\r\n//                         todoData.map((entry, index) => (\r\n//                             <div key={entry._id} className={Styles.todo}>\r\n//                                 {editingTodo === entry._id ? (\r\n//                                     <span className={Styles.infoContainer}>\r\n//                                         <input\r\n//                                             type='text'\r\n//                                             value={editedTodo}\r\n//                                             onChange={(event) => setEditedTodo(event.target.value)}\r\n//                                         />\r\n//                                         <button onClick={() => editTodo(entry._id)}>Save</button>\r\n//                                         <button onClick={() => setEditingTodo(null)}>Cancel</button>\r\n//                                     </span>\r\n//                                 ) : (\r\n//                                     <span className={Styles.infoContainer}>\r\n//                                         <input\r\n//                                             type='checkbox'\r\n//                                             checked={entry.done}\r\n//                                             onChange={() => {\r\n//                                                 updateTodo(entry._id);\r\n//                                             }}\r\n//                                         />\r\n//                                         {entry.title}\r\n//                                     </span>\r\n//                                 )}\r\n//                                 <span style={{ cursor: 'pointer' }} onClick={() => setEditingTodo(entry._id)}>\r\n//                                     Edit\r\n//                                 </span>\r\n//                                 <span\r\n//                                     style={{ cursor: 'pointer' }}\r\n//                                     onClick={() => {\r\n//                                         deleteTodo(entry._id);\r\n//                                     }}\r\n//                                 >\r\n//                                     Delete\r\n//                                 </span>\r\n//                             </div>\r\n//                         ))\r\n//                     ) : (\r\n//                         <p className={Styles.noTodoMessage}>No tasks available. Please add a new task.</p>\r\n//                     )\r\n//                 )}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\nimport { useEffect, useState } from 'react'\r\nimport Styles from './TODO.module.css'\r\nimport { dummy } from './dummy'\r\nimport axios from 'axios';\r\n\r\nexport function TODO(props) {\r\n\r\n    const [newTodo, setNewTodo] = useState('')\r\n    const [newDescription, setNewDescription] = useState('')\r\n    const [todoData, setTodoData] = useState(dummy);\r\n    const [loading, setLoading] = useState(true);\r\n    const [editingTodo, setEditingTodo] = useState(null);\r\n    const [editedTodo, setEditedTodo] = useState('');\r\n    const [editedDescription, setEditedDescription] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchTodo = async () => {\r\n            const apiData = await getTodo()\r\n            setTodoData(apiData);\r\n            setLoading(false)\r\n        }\r\n        fetchTodo();\r\n    }, [])\r\n\r\n    const getTodo = async () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            url: `http://localhost:8000/api/todo`,\r\n            headers: {\r\n                accept: \"application/json\",\r\n            }\r\n        }\r\n        try {\r\n            const response = await axios.request(options)\r\n            return response.data\r\n        } catch (err) {\r\n            console.log(err);\r\n            return []; // return an empty array in case of error\r\n        }\r\n    }\r\n\r\n    const addTodo = () => {\r\n        const options = {\r\n            method: \"POST\",\r\n            url: `http://localhost:8000/api/todo`,\r\n            headers: {\r\n                accept: \"application/json\",\r\n            },\r\n            data: {\r\n                title: newTodo,\r\n                description: newDescription\r\n            }\r\n        }\r\n        axios\r\n            .request(options)\r\n            .then(function (response) {\r\n                console.log(response.data)\r\n                setTodoData(prevData => [...prevData, response.data.newTodo])\r\n                setNewTodo('')\r\n                setNewDescription('')\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const deleteTodo = (id) => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n            url: `http://localhost:8000/api/todo/${id}`,\r\n            headers: {\r\n                accept: \"application/json\",\r\n            }\r\n        }\r\n        axios\r\n            .request(options)\r\n            .then(function (response) {\r\n                console.log(response.data)\r\n                setTodoData(prevData => prevData.filter(todo => todo._id !== id))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    const updateTodo = (id) => {\r\n        const todoToUpdate = todoData.find(todo => todo._id === id)\r\n        const options = {\r\n            method: \"PATCH\",\r\n            url: `http://localhost:8000/api/todo/${id}`,\r\n            headers: {\r\n                accept: \"application/json\",\r\n            },\r\n            data: {\r\n                ...todoToUpdate,\r\n                done: !todoToUpdate.done\r\n            }\r\n        }\r\n        axios\r\n            .request(options)\r\n            .then(function (response) {\r\n                console.log(response.data)\r\n                setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    const editTodo = (id) => {\r\n        const options = {\r\n            method: \"PATCH\",\r\n            url: `http://localhost:8000/api/todo/${id}`,\r\n            headers: {\r\n                accept: \"application/json\",\r\n            },\r\n            data: {\r\n                title: editedTodo,\r\n                description: editedDescription\r\n            }\r\n        }\r\n        axios\r\n            .request(options)\r\n            .then(function (response) {\r\n                console.log(response.data)\r\n                setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\r\n                setEditingTodo(null)\r\n                setEditedTodo('')\r\n                setEditedDescription('')\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    return (\r\n        <div className={Styles.ancestorContainer}>\r\n            <div className={Styles.headerContainer}>\r\n                <h1>\r\n                    Tasks\r\n                </h1>\r\n                <span>\r\n                    <input\r\n                        className={Styles.todoInput}\r\n                        type='text'\r\n                        name='New Todo'\r\n                        value={newTodo}\r\n                        onChange={(event) => {\r\n                            setNewTodo(event.target.value)\r\n                        }}\r\n                    />\r\n                    <input\r\n                        className={Styles.todoInput}\r\n                        type='text'\r\n                        name='New Description'\r\n                        value={newDescription}\r\n                        onChange={(event) => {\r\n                            setNewDescription(event.target.value)\r\n                        }}\r\n                    />\r\n                    <button\r\n                        id='addButton'\r\n                        name='add'\r\n                        className={Styles.addButton}\r\n                        onClick={addTodo}\r\n                    >\r\n                        + New Todo\r\n                    </button>\r\n                </span>\r\n            </div>\r\n            <div id='todoContainer' className={Styles.todoContainer}>\r\n                {loading ? (\r\n                    <p style={{ color: 'white' }}>Loading...</p>\r\n                ) : (\r\n                    todoData.length > 0 ? (\r\n                        todoData.map((entry, index) => (\r\n                            <div key={entry._id} className={Styles.todo}>\r\n                                {editingTodo === entry._id ? (\r\n                                    <span className={Styles.infoContainer}>\r\n                                        <input\r\n                                            type='text'\r\n                                            value={editedTodo}\r\n                                            onChange={(event) => setEditedTodo(event.target.value)}\r\n                                        />\r\n                                        <input\r\n                                            type='text'\r\n                                            value={editedDescription}\r\n                                            onChange={(event) => setEditedDescription(event.target.value)}\r\n                                        />\r\n                                        <button onClick={() => editTodo(entry._id)}>Save</button>\r\n                                        <button onClick={() => setEditingTodo(null)}>Cancel</button>\r\n                                    </span>\r\n                                ) : (\r\n                                    <span className={Styles.infoContainer}>\r\n                                        <input\r\n                                            type='checkbox'\r\n                                            checked={entry.done}\r\n                                            onChange={() => {\r\n                                                updateTodo(entry._id);\r\n                                            }}\r\n                                        />\r\n                                        <div>\r\n                                            <div>{entry.title}</div>\r\n                                            <div>{entry.description}</div>\r\n                                        </div>\r\n                                    </span>\r\n                                )}\r\n                                <span style={{ cursor: 'pointer' }} onClick={() => {\r\n                                    setEditingTodo(entry._id)\r\n                                    setEditedTodo(entry.title)\r\n                                    setEditedDescription(entry.description)\r\n                                }}>\r\n                                    Edit\r\n                                </span>\r\n                                <span\r\n                                    style={{ cursor: 'pointer' }}\r\n                                    onClick={() => {\r\n                                        deleteTodo(entry._id);\r\n                                    }}\r\n                                >\r\n                                    Delete\r\n                                </span>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <p className={Styles.noTodoMessage}>No tasks available. Please add a new task.</p>\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,KAAK,QAAQ,SAAS;AAC/B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}