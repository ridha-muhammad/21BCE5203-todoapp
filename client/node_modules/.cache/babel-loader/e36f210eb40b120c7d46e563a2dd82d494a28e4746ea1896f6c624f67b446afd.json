{"ast":null,"code":"// import { useEffect, useState } from 'react'\n// import Styles from './TODO.module.css'\n// import { dummy } from './dummy'\n// import axios from 'axios';\n\n// export function TODO(props) {\n\n//     const [newTodo, setNewTodo] = useState('')\n//     const [todoData, setTodoData] = useState(dummy);\n//     const [loading, setLoading] = useState(true);\n//     const [editingTodo, setEditingTodo] = useState(null);\n//     const [editedTodo, setEditedTodo] = useState('');\n\n//     useEffect(() => {\n//         const fetchTodo = async () => {\n//             const apiData = await getTodo()\n//             setTodoData(apiData);\n//             setLoading(false)\n//         }\n//         fetchTodo();\n//     }, [])\n\n//     const getTodo = async () => {\n//         const options = {\n//             method: \"GET\",\n//             url: `http://localhost:8000/api/todo`,\n//             headers: {\n//                 accept: \"application/json\",\n//             }\n//         }\n//         try {\n//             const response = await axios.request(options)\n//             return response.data\n//         } catch (err) {\n//             console.log(err);\n//             return []; // return an empty array in case of error\n//         }\n//     }\n\n//     const addTodo = () => {\n//         const options = {\n//             method: \"POST\",\n//             url: `http://localhost:8000/api/todo`,\n//             headers: {\n//                 accept: \"application/json\",\n//             },\n//             data: {\n//                 title: newTodo\n//             }\n//         }\n//         axios\n//             .request(options)\n//             .then(function (response) {\n//                 console.log(response.data)\n//                 setTodoData(prevData => [...prevData, response.data.newTodo])\n//             })\n//             .catch((err) => {\n//                 console.log(err)\n//             })\n//     }\n\n//     const deleteTodo = (id) => {\n//         const options = {\n//             method: \"DELETE\",\n//             url: `http://localhost:8000/api/todo/${id}`,\n//             headers: {\n//                 accept: \"application/json\",\n//             }\n//         }\n//         axios\n//             .request(options)\n//             .then(function (response) {\n//                 console.log(response.data)\n//                 setTodoData(prevData => prevData.filter(todo => todo._id !== id))\n//             })\n//             .catch((err) => {\n//                 console.log(err)\n//             })\n//     };\n\n//     const updateTodo = (id) => {\n//         const todoToUpdate = todoData.find(todo => todo._id === id)\n//         const options = {\n//             method: \"PATCH\",\n//             url: `http://localhost:8000/api/todo/${id}`,\n//             headers: {\n//                 accept: \"application/json\",\n//             },\n//             data: {\n//                 ...todoToUpdate,\n//                 done: !todoToUpdate.done\n//             }\n//         }\n//         axios\n//             .request(options)\n//             .then(function (response) {\n//                 console.log(response.data)\n//                 setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\n//             })\n//             .catch((err) => {\n//                 console.log(err)\n//             })\n//     };\n\n//     const editTodo = (id) => {\n//         const options = {\n//             method: \"PATCH\",\n//             url: `http://localhost:8000/api/todo/${id}`,\n//             headers: {\n//                 accept: \"application/json\",\n//             },\n//             data: {\n//                 title: editedTodo\n//             }\n//         }\n//         axios\n//             .request(options)\n//             .then(function (response) {\n//                 console.log(response.data)\n//                 setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\n//                 setEditingTodo(null)\n//                 setEditedTodo('')\n//             })\n//             .catch((err) => {\n//                 console.log(err)\n//             })\n//     };\n\n//     return (\n//         <div className={Styles.ancestorContainer}>\n//             <div className={Styles.headerContainer}>\n//                 <h1>\n//                     Tasks\n//                 </h1>\n//                 <span>\n//                     <input\n//                         className={Styles.todoInput}\n//                         type='text'\n//                         name='New Todo'\n//                         value={newTodo}\n//                         onChange={(event) => {\n//                             setNewTodo(event.target.value)\n//                         }}\n//                     />\n//                     <button\n//                         id='addButton'\n//                         name='add'\n//                         className={Styles.addButton}\n//                         onClick={() => {\n//                             addTodo()\n//                             setNewTodo('')\n//                         }}\n//                     >\n//                         + New Todo\n//                     </button>\n//                 </span>\n//             </div>\n//             <div id='todoContainer' className={Styles.todoContainer}>\n//                 {loading ? (\n//                     <p style={{ color: 'white' }}>Loading...</p>\n//                 ) : (\n//                     todoData.length > 0 ? (\n//                         todoData.map((entry, index) => (\n//                             <div key={entry._id} className={Styles.todo}>\n//                                 {editingTodo === entry._id ? (\n//                                     <span className={Styles.infoContainer}>\n//                                         <input\n//                                             type='text'\n//                                             value={editedTodo}\n//                                             onChange={(event) => setEditedTodo(event.target.value)}\n//                                         />\n//                                         <button onClick={() => editTodo(entry._id)}>Save</button>\n//                                         <button onClick={() => setEditingTodo(null)}>Cancel</button>\n//                                     </span>\n//                                 ) : (\n//                                     <span className={Styles.infoContainer}>\n//                                         <input\n//                                             type='checkbox'\n//                                             checked={entry.done}\n//                                             onChange={() => {\n//                                                 updateTodo(entry._id);\n//                                             }}\n//                                         />\n//                                         {entry.title}\n//                                     </span>\n//                                 )}\n//                                 <span style={{ cursor: 'pointer' }} onClick={() => setEditingTodo(entry._id)}>\n//                                     Edit\n//                                 </span>\n//                                 <span\n//                                     style={{ cursor: 'pointer' }}\n//                                     onClick={() => {\n//                                         deleteTodo(entry._id);\n//                                     }}\n//                                 >\n//                                     Delete\n//                                 </span>\n//                             </div>\n//                         ))\n//                     ) : (\n//                         <p className={Styles.noTodoMessage}>No tasks available. Please add a new task.</p>\n//                     )\n//                 )}\n//             </div>\n//         </div>\n//     )\n// }","map":{"version":3,"names":[],"sources":["C:/Users/ridha/College/Java Full Stack Course/todoapp/client/src/Views/TODO/TODO.js"],"sourcesContent":["// import { useEffect, useState } from 'react'\r\n// import Styles from './TODO.module.css'\r\n// import { dummy } from './dummy'\r\n// import axios from 'axios';\r\n\r\n// export function TODO(props) {\r\n\r\n//     const [newTodo, setNewTodo] = useState('')\r\n//     const [todoData, setTodoData] = useState(dummy);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [editingTodo, setEditingTodo] = useState(null);\r\n//     const [editedTodo, setEditedTodo] = useState('');\r\n\r\n//     useEffect(() => {\r\n//         const fetchTodo = async () => {\r\n//             const apiData = await getTodo()\r\n//             setTodoData(apiData);\r\n//             setLoading(false)\r\n//         }\r\n//         fetchTodo();\r\n//     }, [])\r\n\r\n//     const getTodo = async () => {\r\n//         const options = {\r\n//             method: \"GET\",\r\n//             url: `http://localhost:8000/api/todo`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             }\r\n//         }\r\n//         try {\r\n//             const response = await axios.request(options)\r\n//             return response.data\r\n//         } catch (err) {\r\n//             console.log(err);\r\n//             return []; // return an empty array in case of error\r\n//         }\r\n//     }\r\n\r\n//     const addTodo = () => {\r\n//         const options = {\r\n//             method: \"POST\",\r\n//             url: `http://localhost:8000/api/todo`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             },\r\n//             data: {\r\n//                 title: newTodo\r\n//             }\r\n//         }\r\n//         axios\r\n//             .request(options)\r\n//             .then(function (response) {\r\n//                 console.log(response.data)\r\n//                 setTodoData(prevData => [...prevData, response.data.newTodo])\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err)\r\n//             })\r\n//     }\r\n\r\n//     const deleteTodo = (id) => {\r\n//         const options = {\r\n//             method: \"DELETE\",\r\n//             url: `http://localhost:8000/api/todo/${id}`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             }\r\n//         }\r\n//         axios\r\n//             .request(options)\r\n//             .then(function (response) {\r\n//                 console.log(response.data)\r\n//                 setTodoData(prevData => prevData.filter(todo => todo._id !== id))\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err)\r\n//             })\r\n//     };\r\n\r\n//     const updateTodo = (id) => {\r\n//         const todoToUpdate = todoData.find(todo => todo._id === id)\r\n//         const options = {\r\n//             method: \"PATCH\",\r\n//             url: `http://localhost:8000/api/todo/${id}`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             },\r\n//             data: {\r\n//                 ...todoToUpdate,\r\n//                 done: !todoToUpdate.done\r\n//             }\r\n//         }\r\n//         axios\r\n//             .request(options)\r\n//             .then(function (response) {\r\n//                 console.log(response.data)\r\n//                 setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err)\r\n//             })\r\n//     };\r\n\r\n//     const editTodo = (id) => {\r\n//         const options = {\r\n//             method: \"PATCH\",\r\n//             url: `http://localhost:8000/api/todo/${id}`,\r\n//             headers: {\r\n//                 accept: \"application/json\",\r\n//             },\r\n//             data: {\r\n//                 title: editedTodo\r\n//             }\r\n//         }\r\n//         axios\r\n//             .request(options)\r\n//             .then(function (response) {\r\n//                 console.log(response.data)\r\n//                 setTodoData(prevData => prevData.map(todo => todo._id === id ? response.data : todo))\r\n//                 setEditingTodo(null)\r\n//                 setEditedTodo('')\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err)\r\n//             })\r\n//     };\r\n\r\n//     return (\r\n//         <div className={Styles.ancestorContainer}>\r\n//             <div className={Styles.headerContainer}>\r\n//                 <h1>\r\n//                     Tasks\r\n//                 </h1>\r\n//                 <span>\r\n//                     <input\r\n//                         className={Styles.todoInput}\r\n//                         type='text'\r\n//                         name='New Todo'\r\n//                         value={newTodo}\r\n//                         onChange={(event) => {\r\n//                             setNewTodo(event.target.value)\r\n//                         }}\r\n//                     />\r\n//                     <button\r\n//                         id='addButton'\r\n//                         name='add'\r\n//                         className={Styles.addButton}\r\n//                         onClick={() => {\r\n//                             addTodo()\r\n//                             setNewTodo('')\r\n//                         }}\r\n//                     >\r\n//                         + New Todo\r\n//                     </button>\r\n//                 </span>\r\n//             </div>\r\n//             <div id='todoContainer' className={Styles.todoContainer}>\r\n//                 {loading ? (\r\n//                     <p style={{ color: 'white' }}>Loading...</p>\r\n//                 ) : (\r\n//                     todoData.length > 0 ? (\r\n//                         todoData.map((entry, index) => (\r\n//                             <div key={entry._id} className={Styles.todo}>\r\n//                                 {editingTodo === entry._id ? (\r\n//                                     <span className={Styles.infoContainer}>\r\n//                                         <input\r\n//                                             type='text'\r\n//                                             value={editedTodo}\r\n//                                             onChange={(event) => setEditedTodo(event.target.value)}\r\n//                                         />\r\n//                                         <button onClick={() => editTodo(entry._id)}>Save</button>\r\n//                                         <button onClick={() => setEditingTodo(null)}>Cancel</button>\r\n//                                     </span>\r\n//                                 ) : (\r\n//                                     <span className={Styles.infoContainer}>\r\n//                                         <input\r\n//                                             type='checkbox'\r\n//                                             checked={entry.done}\r\n//                                             onChange={() => {\r\n//                                                 updateTodo(entry._id);\r\n//                                             }}\r\n//                                         />\r\n//                                         {entry.title}\r\n//                                     </span>\r\n//                                 )}\r\n//                                 <span style={{ cursor: 'pointer' }} onClick={() => setEditingTodo(entry._id)}>\r\n//                                     Edit\r\n//                                 </span>\r\n//                                 <span\r\n//                                     style={{ cursor: 'pointer' }}\r\n//                                     onClick={() => {\r\n//                                         deleteTodo(entry._id);\r\n//                                     }}\r\n//                                 >\r\n//                                     Delete\r\n//                                 </span>\r\n//                             </div>\r\n//                         ))\r\n//                     ) : (\r\n//                         <p className={Styles.noTodoMessage}>No tasks available. Please add a new task.</p>\r\n//                     )\r\n//                 )}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}